unit DB_Actor;

interface
uses DBRecordBase,System.Classes,AttrType,System.SysUtils,CheTek.SerialObject,CheTek.Mysql,System.Generics.Collections;
Type
  TDBRecordOfActor = class(TDBRecordBase)
    ActorID:UInt64;
    sChrName:string;
    sCurMap:string;
    wCurX:Word;
    wCurY:Word;
    btDir:Byte;
    btHair:Byte;
    btSex:Byte;
    btJob:Byte;
    nGold:Integer;
    Abil:TOAbility;
    wStatusTimeArr:TStatusTime;
    sHomeMap:string;
    wHomeX:Word;
    wHomeY:Word;
    sDearName:string;
    sMasterName:string;
    boMaster:Boolean;
    btCreditPoint:Integer;
    btDivorce:Byte;
    btMarryCount:Byte;
    sStoragePwd:string;
    btReLevel:Byte;
    boOnHorse:Boolean;
    BonusAbil:TNakedAbility;
    nBonusPoint:Integer;
    nGameGold:Integer;
    nGamePoint:Integer;
    nGameDiamond:Integer;
    nGameGird:Integer;
    nGameGlory:Integer;
    nPayMentPoint:Integer;
    nPKPOINT:Integer;
    btAllowGroup:Byte;
    btF9:Byte;
    btAttatckMode:Byte;
    btIncHealth:Byte;
    btIncSpell:Byte;
    btIncHealing:Byte;
    btFightZoneDieCount:Byte;
    sAccount:string;
    btEE:Byte;
    btEF:Byte;
    boLockLogon:Boolean;
    wContribution:Word;
    nHungerStatus:Integer;
    boAllowGuildReCall:Boolean;
    wGroupRcallTime:Word;
    dBodyLuck:Double;
    boAllowGroupReCall:Boolean;
    nEXPRATE:Integer;
    nExpTime:Integer;
    btLastOutStatus:Byte;
    wMasterCount:Word;
    boHasHero:Boolean;
    boIsHero:Boolean;
    btStatus:Byte;
    sHeroChrName:string;
    nGrudge:Integer;
    QuestFlag:TQuestFlag;
    NewStatus:TNewStatus;
    wStatusDelayTime:Word;
    AddByte:TAddByte;
    HumItems:THumItems;
    BagItems:TBagItems;
    HumMagics:THumMagics;
    StorageItems:TStorageItems;
    HumAddItems:THumAddItems;
    HumDataEx:TDBHumDataEx;
    procedure Insert();
    procedure Update();
    class function GetCreateTableSql():TStringList;override;
    class function FeatchToList(MysqlRows:TMysqlRow):TList<TDBRecordOfActor>;
  end;


implementation
uses CheTek.DBEngine;
procedure TDBRecordOfActor.Insert();
var
  Sql:String;
  Rows : TMysqlRow;
  V : Array[1..69] of String;
begin
  V[1] := IntToStr(ActorID);
  V[2] := Self._Q(sChrName);
  V[3] := Self._Q(sCurMap);
  V[4] := IntToStr(wCurX);
  V[5] := IntToStr(wCurY);
  V[6] := IntToStr(btDir);
  V[7] := IntToStr(btHair);
  V[8] := IntToStr(btSex);
  V[9] := IntToStr(btJob);
  V[10] := IntToStr(nGold);
  V[11] := Self._Q(TSerialObject.RecordToJson<TOAbility>(Abil));
  V[12] := Self._Q(TSerialObject.RecordToJson<TStatusTime>(wStatusTimeArr));
  V[13] := Self._Q(sHomeMap);
  V[14] := IntToStr(wHomeX);
  V[15] := IntToStr(wHomeY);
  V[16] := Self._Q(sDearName);
  V[17] := Self._Q(sMasterName);
  V[18] := MysqlBoolean(boMaster);
  V[19] := IntToStr(btCreditPoint);
  V[20] := IntToStr(btDivorce);
  V[21] := IntToStr(btMarryCount);
  V[22] := Self._Q(sStoragePwd);
  V[23] := IntToStr(btReLevel);
  V[24] := MysqlBoolean(boOnHorse);
  V[25] := Self._Q(TSerialObject.RecordToJson<TNakedAbility>(BonusAbil));
  V[26] := IntToStr(nBonusPoint);
  V[27] := IntToStr(nGameGold);
  V[28] := IntToStr(nGamePoint);
  V[29] := IntToStr(nGameDiamond);
  V[30] := IntToStr(nGameGird);
  V[31] := IntToStr(nGameGlory);
  V[32] := IntToStr(nPayMentPoint);
  V[33] := IntToStr(nPKPOINT);
  V[34] := IntToStr(btAllowGroup);
  V[35] := IntToStr(btF9);
  V[36] := IntToStr(btAttatckMode);
  V[37] := IntToStr(btIncHealth);
  V[38] := IntToStr(btIncSpell);
  V[39] := IntToStr(btIncHealing);
  V[40] := IntToStr(btFightZoneDieCount);
  V[41] := Self._Q(sAccount);
  V[42] := IntToStr(btEE);
  V[43] := IntToStr(btEF);
  V[44] := MysqlBoolean(boLockLogon);
  V[45] := IntToStr(wContribution);
  V[46] := IntToStr(nHungerStatus);
  V[47] := MysqlBoolean(boAllowGuildReCall);
  V[48] := IntToStr(wGroupRcallTime);
  V[49] := DoubleToStr(dBodyLuck);
  V[50] := MysqlBoolean(boAllowGroupReCall);
  V[51] := IntToStr(nEXPRATE);
  V[52] := IntToStr(nExpTime);
  V[53] := IntToStr(btLastOutStatus);
  V[54] := IntToStr(wMasterCount);
  V[55] := MysqlBoolean(boHasHero);
  V[56] := MysqlBoolean(boIsHero);
  V[57] := IntToStr(btStatus);
  V[58] := Self._Q(sHeroChrName);
  V[59] := IntToStr(nGrudge);
  V[60] := Self._Q(TSerialObject.RecordToJson<TQuestFlag>(QuestFlag));
  V[61] := Self._Q(TSerialObject.RecordToJson<TNewStatus>(NewStatus));
  V[62] := Self._Q(TSerialObject.RecordToJson<Word>(wStatusDelayTime));
  V[63] := Self._Q(TSerialObject.RecordToJson<TAddByte>(AddByte));
  V[64] := Self._Q(TSerialObject.RecordToJson<THumItems>(HumItems));
  V[65] := Self._Q(TSerialObject.RecordToJson<TBagItems>(BagItems));
  V[66] := Self._Q(TSerialObject.RecordToJson<THumMagics>(HumMagics));
  V[67] := Self._Q(TSerialObject.RecordToJson<TStorageItems>(StorageItems));
  V[68] := Self._Q(TSerialObject.RecordToJson<THumAddItems>(HumAddItems));
  V[69] := Self._Q(TSerialObject.RecordToJson<TDBHumDataEx>(HumDataEx));
  Sql := format('INSERT INTO Actor (ActorID,sChrName,sCurMap,wCurX,wCurY,btDir,btHair,btSex,btJob,nGold,Abil,wStatusTimeArr,sHomeMap,wHomeX,wHomeY,sDearName,sMasterName,boMaster,btCreditPoint,btDivorce,btMarryCount,sStoragePwd,btReLevel,boOnHorse,BonusAbil,nBonusPoint,nGameGold,nGamePoint,nGameDiamond,nGameGird,nGameGlory,nPayMentPoint,nPKPOINT,btAllowGroup,btF9,btAttatckMode,btIncHealth,btIncSpell,btIncHealing,btFightZoneDieCount,sAccount,btEE,btEF,boLockLogon,wContribution,nHungerStatus,boAllowGuildReCall,wGroupRcallTime,dBodyLuck,boAllowGroupReCall,nEXPRATE,nExpTime,btLastOutStatus,wMasterCount,boHasHero,boIsHero,btStatus,sHeroChrName,nGrudge,QuestFlag,NewStatus,wStatusDelayTime,AddByte,HumItems,BagItems,HumMagics,StorageItems,HumAddItems,HumDataEx) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);',[ V[1], V[2], V[3], V[4], V[5], V[6], V[7], V[8], V[9], V[10], V[11], V[12], V[13], V[14], V[15], V[16], V[17], V[18], V[19], V[20], V[21], V[22], V[23], V[24], V[25], V[26], V[27], V[28], V[29], V[30], V[31], V[32], V[33], V[34], V[35], V[36], V[37], V[38], V[39], V[40], V[41], V[42], V[43], V[44], V[45], V[46], V[47], V[48], V[49], V[50], V[51], V[52], V[53], V[54], V[55], V[56], V[57], V[58], V[59], V[60], V[61], V[62], V[63], V[64], V[65], V[66], V[67], V[68], V[69]]);
  Rows := TDBEngine.Inst().Query(Sql);
end;

procedure TDBRecordOfActor.Update();
var
  Sql:String;
  Rows : TMysqlRow;
begin
  Sql := 'ActorID = ' + IntToStr(ActorID);
  Sql := Sql + ', '+ 'sChrName = ' + Self._Q(sChrName);
  Sql := Sql + ', '+ 'sCurMap = ' + Self._Q(sCurMap);
  Sql := Sql + ', '+ 'wCurX = ' + IntToStr(wCurX);
  Sql := Sql + ', '+ 'wCurY = ' + IntToStr(wCurY);
  Sql := Sql + ', '+ 'btDir = ' + IntToStr(btDir);
  Sql := Sql + ', '+ 'btHair = ' + IntToStr(btHair);
  Sql := Sql + ', '+ 'btSex = ' + IntToStr(btSex);
  Sql := Sql + ', '+ 'btJob = ' + IntToStr(btJob);
  Sql := Sql + ', '+ 'nGold = ' + IntToStr(nGold);
  Sql := Sql + ', '+ 'Abil = ' + Self._Q(TSerialObject.RecordToJson<TOAbility>(Abil));
  Sql := Sql + ', '+ 'wStatusTimeArr = ' + Self._Q(TSerialObject.RecordToJson<TStatusTime>(wStatusTimeArr));
  Sql := Sql + ', '+ 'sHomeMap = ' + Self._Q(sHomeMap);
  Sql := Sql + ', '+ 'wHomeX = ' + IntToStr(wHomeX);
  Sql := Sql + ', '+ 'wHomeY = ' + IntToStr(wHomeY);
  Sql := Sql + ', '+ 'sDearName = ' + Self._Q(sDearName);
  Sql := Sql + ', '+ 'sMasterName = ' + Self._Q(sMasterName);
  Sql := Sql + ', '+ 'boMaster = ' + MysqlBoolean(boMaster);
  Sql := Sql + ', '+ 'btCreditPoint = ' + IntToStr(btCreditPoint);
  Sql := Sql + ', '+ 'btDivorce = ' + IntToStr(btDivorce);
  Sql := Sql + ', '+ 'btMarryCount = ' + IntToStr(btMarryCount);
  Sql := Sql + ', '+ 'sStoragePwd = ' + Self._Q(sStoragePwd);
  Sql := Sql + ', '+ 'btReLevel = ' + IntToStr(btReLevel);
  Sql := Sql + ', '+ 'boOnHorse = ' + MysqlBoolean(boOnHorse);
  Sql := Sql + ', '+ 'BonusAbil = ' + Self._Q(TSerialObject.RecordToJson<TNakedAbility>(BonusAbil));
  Sql := Sql + ', '+ 'nBonusPoint = ' + IntToStr(nBonusPoint);
  Sql := Sql + ', '+ 'nGameGold = ' + IntToStr(nGameGold);
  Sql := Sql + ', '+ 'nGamePoint = ' + IntToStr(nGamePoint);
  Sql := Sql + ', '+ 'nGameDiamond = ' + IntToStr(nGameDiamond);
  Sql := Sql + ', '+ 'nGameGird = ' + IntToStr(nGameGird);
  Sql := Sql + ', '+ 'nGameGlory = ' + IntToStr(nGameGlory);
  Sql := Sql + ', '+ 'nPayMentPoint = ' + IntToStr(nPayMentPoint);
  Sql := Sql + ', '+ 'nPKPOINT = ' + IntToStr(nPKPOINT);
  Sql := Sql + ', '+ 'btAllowGroup = ' + IntToStr(btAllowGroup);
  Sql := Sql + ', '+ 'btF9 = ' + IntToStr(btF9);
  Sql := Sql + ', '+ 'btAttatckMode = ' + IntToStr(btAttatckMode);
  Sql := Sql + ', '+ 'btIncHealth = ' + IntToStr(btIncHealth);
  Sql := Sql + ', '+ 'btIncSpell = ' + IntToStr(btIncSpell);
  Sql := Sql + ', '+ 'btIncHealing = ' + IntToStr(btIncHealing);
  Sql := Sql + ', '+ 'btFightZoneDieCount = ' + IntToStr(btFightZoneDieCount);
  Sql := Sql + ', '+ 'sAccount = ' + Self._Q(sAccount);
  Sql := Sql + ', '+ 'btEE = ' + IntToStr(btEE);
  Sql := Sql + ', '+ 'btEF = ' + IntToStr(btEF);
  Sql := Sql + ', '+ 'boLockLogon = ' + MysqlBoolean(boLockLogon);
  Sql := Sql + ', '+ 'wContribution = ' + IntToStr(wContribution);
  Sql := Sql + ', '+ 'nHungerStatus = ' + IntToStr(nHungerStatus);
  Sql := Sql + ', '+ 'boAllowGuildReCall = ' + MysqlBoolean(boAllowGuildReCall);
  Sql := Sql + ', '+ 'wGroupRcallTime = ' + IntToStr(wGroupRcallTime);
  Sql := Sql + ', '+ 'dBodyLuck = ' + DoubleToStr(dBodyLuck);
  Sql := Sql + ', '+ 'boAllowGroupReCall = ' + MysqlBoolean(boAllowGroupReCall);
  Sql := Sql + ', '+ 'nEXPRATE = ' + IntToStr(nEXPRATE);
  Sql := Sql + ', '+ 'nExpTime = ' + IntToStr(nExpTime);
  Sql := Sql + ', '+ 'btLastOutStatus = ' + IntToStr(btLastOutStatus);
  Sql := Sql + ', '+ 'wMasterCount = ' + IntToStr(wMasterCount);
  Sql := Sql + ', '+ 'boHasHero = ' + MysqlBoolean(boHasHero);
  Sql := Sql + ', '+ 'boIsHero = ' + MysqlBoolean(boIsHero);
  Sql := Sql + ', '+ 'btStatus = ' + IntToStr(btStatus);
  Sql := Sql + ', '+ 'sHeroChrName = ' + Self._Q(sHeroChrName);
  Sql := Sql + ', '+ 'nGrudge = ' + IntToStr(nGrudge);
  Sql := Sql + ', '+ 'QuestFlag = ' + Self._Q(TSerialObject.RecordToJson<TQuestFlag>(QuestFlag));
  Sql := Sql + ', '+ 'NewStatus = ' + Self._Q(TSerialObject.RecordToJson<TNewStatus>(NewStatus));
  Sql := Sql + ', '+ 'wStatusDelayTime = ' + Self._Q(TSerialObject.RecordToJson<Word>(wStatusDelayTime));
  Sql := Sql + ', '+ 'AddByte = ' + Self._Q(TSerialObject.RecordToJson<TAddByte>(AddByte));
  Sql := Sql + ', '+ 'HumItems = ' + Self._Q(TSerialObject.RecordToJson<THumItems>(HumItems));
  Sql := Sql + ', '+ 'BagItems = ' + Self._Q(TSerialObject.RecordToJson<TBagItems>(BagItems));
  Sql := Sql + ', '+ 'HumMagics = ' + Self._Q(TSerialObject.RecordToJson<THumMagics>(HumMagics));
  Sql := Sql + ', '+ 'StorageItems = ' + Self._Q(TSerialObject.RecordToJson<TStorageItems>(StorageItems));
  Sql := Sql + ', '+ 'HumAddItems = ' + Self._Q(TSerialObject.RecordToJson<THumAddItems>(HumAddItems));
  Sql := Sql + ', '+ 'HumDataEx = ' + Self._Q(TSerialObject.RecordToJson<TDBHumDataEx>(HumDataEx));
  Sql := Format('UPDATE %s SET %s WHERE %s = %s ;', ['Actor', Sql ,'ActorID',IntToStr(ActorID)]);
  Rows := TDBEngine.Inst().Query(Sql);
end;

class function TDBRecordOfActor.GetCreateTableSql():TStringList;
begin
  Result := TStringList.Create;
  Result.Add('CREATE TABLE `Actor` (');
  Result.Add('`ActorID` bigint(20) unsigned ,');
  Result.Add('`sChrName` text ,');
  Result.Add('`sCurMap` text ,');
  Result.Add('`wCurX` smallint(6) unsigned ,');
  Result.Add('`wCurY` smallint(6) unsigned ,');
  Result.Add('`btDir` tinyint(4) unsigned ,');
  Result.Add('`btHair` tinyint(4) unsigned ,');
  Result.Add('`btSex` tinyint(4) unsigned ,');
  Result.Add('`btJob` tinyint(4) unsigned ,');
  Result.Add('`nGold` int(11) ,');
  Result.Add('`Abil` json ,');
  Result.Add('`wStatusTimeArr` json ,');
  Result.Add('`sHomeMap` text ,');
  Result.Add('`wHomeX` smallint(6) unsigned ,');
  Result.Add('`wHomeY` smallint(6) unsigned ,');
  Result.Add('`sDearName` text ,');
  Result.Add('`sMasterName` text ,');
  Result.Add('`boMaster` tinyint(1) ,');
  Result.Add('`btCreditPoint` int(11) ,');
  Result.Add('`btDivorce` tinyint(4) unsigned ,');
  Result.Add('`btMarryCount` tinyint(4) unsigned ,');
  Result.Add('`sStoragePwd` text ,');
  Result.Add('`btReLevel` tinyint(4) unsigned ,');
  Result.Add('`boOnHorse` tinyint(1) ,');
  Result.Add('`BonusAbil` json ,');
  Result.Add('`nBonusPoint` int(11) ,');
  Result.Add('`nGameGold` int(11) ,');
  Result.Add('`nGamePoint` int(11) ,');
  Result.Add('`nGameDiamond` int(11) ,');
  Result.Add('`nGameGird` int(11) ,');
  Result.Add('`nGameGlory` int(11) ,');
  Result.Add('`nPayMentPoint` int(11) ,');
  Result.Add('`nPKPOINT` int(11) ,');
  Result.Add('`btAllowGroup` tinyint(4) unsigned ,');
  Result.Add('`btF9` tinyint(4) unsigned ,');
  Result.Add('`btAttatckMode` tinyint(4) unsigned ,');
  Result.Add('`btIncHealth` tinyint(4) unsigned ,');
  Result.Add('`btIncSpell` tinyint(4) unsigned ,');
  Result.Add('`btIncHealing` tinyint(4) unsigned ,');
  Result.Add('`btFightZoneDieCount` tinyint(4) unsigned ,');
  Result.Add('`sAccount` text ,');
  Result.Add('`btEE` tinyint(4) unsigned ,');
  Result.Add('`btEF` tinyint(4) unsigned ,');
  Result.Add('`boLockLogon` tinyint(1) ,');
  Result.Add('`wContribution` smallint(6) unsigned ,');
  Result.Add('`nHungerStatus` int(11) ,');
  Result.Add('`boAllowGuildReCall` tinyint(1) ,');
  Result.Add('`wGroupRcallTime` smallint(6) unsigned ,');
  Result.Add('`dBodyLuck` double ,');
  Result.Add('`boAllowGroupReCall` tinyint(1) ,');
  Result.Add('`nEXPRATE` int(11) ,');
  Result.Add('`nExpTime` int(11) ,');
  Result.Add('`btLastOutStatus` tinyint(4) unsigned ,');
  Result.Add('`wMasterCount` smallint(6) unsigned ,');
  Result.Add('`boHasHero` tinyint(1) ,');
  Result.Add('`boIsHero` tinyint(1) ,');
  Result.Add('`btStatus` tinyint(4) unsigned ,');
  Result.Add('`sHeroChrName` text ,');
  Result.Add('`nGrudge` int(11) ,');
  Result.Add('`QuestFlag` json ,');
  Result.Add('`NewStatus` json ,');
  Result.Add('`wStatusDelayTime` json ,');
  Result.Add('`AddByte` json ,');
  Result.Add('`HumItems` json ,');
  Result.Add('`BagItems` json ,');
  Result.Add('`HumMagics` json ,');
  Result.Add('`StorageItems` json ,');
  Result.Add('`HumAddItems` json ,');
  Result.Add('`HumDataEx` json ');
  Result.Add(')');
end;

class function TDBRecordOfActor.FeatchToList(MysqlRows:TMysqlRow):TList<TDBRecordOfActor>;
var
   V:TDBRecordOfActor;
   I:Integer;
   Str:String;
begin
  Result := TList<TDBRecordOfActor>.Create;
  for I := 0 to MysqlRows.Count - 1 do 
  begin
    V := TDBRecordOfActor.Create();
    V.ActorID := MysqlRows.FieldByNameAsInteger('ActorID');
    MysqlRows.FieldByName('sChrName',V.sChrName);
    MysqlRows.FieldByName('sCurMap',V.sCurMap);
    V.wCurX := MysqlRows.FieldByNameAsInteger('wCurX');
    V.wCurY := MysqlRows.FieldByNameAsInteger('wCurY');
    V.btDir := MysqlRows.FieldByNameAsInteger('btDir');
    V.btHair := MysqlRows.FieldByNameAsInteger('btHair');
    V.btSex := MysqlRows.FieldByNameAsInteger('btSex');
    V.btJob := MysqlRows.FieldByNameAsInteger('btJob');
    V.nGold := MysqlRows.FieldByNameAsInteger('nGold');
    MysqlRows.FieldByName('Abil',Str);
    TSerialObject.JsonToRecord<TOAbility>(Str,V.Abil);
    MysqlRows.FieldByName('wStatusTimeArr',Str);
    TSerialObject.JsonToRecord<TStatusTime>(Str,V.wStatusTimeArr);
    MysqlRows.FieldByName('sHomeMap',V.sHomeMap);
    V.wHomeX := MysqlRows.FieldByNameAsInteger('wHomeX');
    V.wHomeY := MysqlRows.FieldByNameAsInteger('wHomeY');
    MysqlRows.FieldByName('sDearName',V.sDearName);
    MysqlRows.FieldByName('sMasterName',V.sMasterName);
    V.boMaster := MysqlRows.FieldByNameAsBoolean('boMaster');
    V.btCreditPoint := MysqlRows.FieldByNameAsInteger('btCreditPoint');
    V.btDivorce := MysqlRows.FieldByNameAsInteger('btDivorce');
    V.btMarryCount := MysqlRows.FieldByNameAsInteger('btMarryCount');
    MysqlRows.FieldByName('sStoragePwd',V.sStoragePwd);
    V.btReLevel := MysqlRows.FieldByNameAsInteger('btReLevel');
    V.boOnHorse := MysqlRows.FieldByNameAsBoolean('boOnHorse');
    MysqlRows.FieldByName('BonusAbil',Str);
    TSerialObject.JsonToRecord<TNakedAbility>(Str,V.BonusAbil);
    V.nBonusPoint := MysqlRows.FieldByNameAsInteger('nBonusPoint');
    V.nGameGold := MysqlRows.FieldByNameAsInteger('nGameGold');
    V.nGamePoint := MysqlRows.FieldByNameAsInteger('nGamePoint');
    V.nGameDiamond := MysqlRows.FieldByNameAsInteger('nGameDiamond');
    V.nGameGird := MysqlRows.FieldByNameAsInteger('nGameGird');
    V.nGameGlory := MysqlRows.FieldByNameAsInteger('nGameGlory');
    V.nPayMentPoint := MysqlRows.FieldByNameAsInteger('nPayMentPoint');
    V.nPKPOINT := MysqlRows.FieldByNameAsInteger('nPKPOINT');
    V.btAllowGroup := MysqlRows.FieldByNameAsInteger('btAllowGroup');
    V.btF9 := MysqlRows.FieldByNameAsInteger('btF9');
    V.btAttatckMode := MysqlRows.FieldByNameAsInteger('btAttatckMode');
    V.btIncHealth := MysqlRows.FieldByNameAsInteger('btIncHealth');
    V.btIncSpell := MysqlRows.FieldByNameAsInteger('btIncSpell');
    V.btIncHealing := MysqlRows.FieldByNameAsInteger('btIncHealing');
    V.btFightZoneDieCount := MysqlRows.FieldByNameAsInteger('btFightZoneDieCount');
    MysqlRows.FieldByName('sAccount',V.sAccount);
    V.btEE := MysqlRows.FieldByNameAsInteger('btEE');
    V.btEF := MysqlRows.FieldByNameAsInteger('btEF');
    V.boLockLogon := MysqlRows.FieldByNameAsBoolean('boLockLogon');
    V.wContribution := MysqlRows.FieldByNameAsInteger('wContribution');
    V.nHungerStatus := MysqlRows.FieldByNameAsInteger('nHungerStatus');
    V.boAllowGuildReCall := MysqlRows.FieldByNameAsBoolean('boAllowGuildReCall');
    V.wGroupRcallTime := MysqlRows.FieldByNameAsInteger('wGroupRcallTime');
    V.dBodyLuck := MysqlRows.FieldByNameAsDouble'dBodyLuck');
    V.boAllowGroupReCall := MysqlRows.FieldByNameAsBoolean('boAllowGroupReCall');
    V.nEXPRATE := MysqlRows.FieldByNameAsInteger('nEXPRATE');
    V.nExpTime := MysqlRows.FieldByNameAsInteger('nExpTime');
    V.btLastOutStatus := MysqlRows.FieldByNameAsInteger('btLastOutStatus');
    V.wMasterCount := MysqlRows.FieldByNameAsInteger('wMasterCount');
    V.boHasHero := MysqlRows.FieldByNameAsBoolean('boHasHero');
    V.boIsHero := MysqlRows.FieldByNameAsBoolean('boIsHero');
    V.btStatus := MysqlRows.FieldByNameAsInteger('btStatus');
    MysqlRows.FieldByName('sHeroChrName',V.sHeroChrName);
    V.nGrudge := MysqlRows.FieldByNameAsInteger('nGrudge');
    MysqlRows.FieldByName('QuestFlag',Str);
    TSerialObject.JsonToRecord<TQuestFlag>(Str,V.QuestFlag);
    MysqlRows.FieldByName('NewStatus',Str);
    TSerialObject.JsonToRecord<TNewStatus>(Str,V.NewStatus);
    V.wStatusDelayTime := MysqlRows.FieldByNameAsInteger('wStatusDelayTime');
    MysqlRows.FieldByName('AddByte',Str);
    TSerialObject.JsonToRecord<TAddByte>(Str,V.AddByte);
    MysqlRows.FieldByName('HumItems',Str);
    TSerialObject.JsonToRecord<THumItems>(Str,V.HumItems);
    MysqlRows.FieldByName('BagItems',Str);
    TSerialObject.JsonToRecord<TBagItems>(Str,V.BagItems);
    MysqlRows.FieldByName('HumMagics',Str);
    TSerialObject.JsonToRecord<THumMagics>(Str,V.HumMagics);
    MysqlRows.FieldByName('StorageItems',Str);
    TSerialObject.JsonToRecord<TStorageItems>(Str,V.StorageItems);
    MysqlRows.FieldByName('HumAddItems',Str);
    TSerialObject.JsonToRecord<THumAddItems>(Str,V.HumAddItems);
    MysqlRows.FieldByName('HumDataEx',Str);
    TSerialObject.JsonToRecord<TDBHumDataEx>(Str,V.HumDataEx);
    Result.Add(V);
    MysqlRows.Next();
  end;
end;



initialization
  TDBEngine.RegisterClass('Actor' , TDBRecordOfActor );
end.
